pipeline {
    agent any
    
    tools {
        gradle 'Gradle Repo' // Define Gradle tool
    }
    
    stages {
        stage('Build') {
            steps {
                sh "./gradlew clean build" // Compile and package the code using Gradle
            }
        }
        stage('Unit and Integration Tests') {
            steps {
                sh "./gradlew test" // Run unit tests using Gradle
                sh "echo Running integration tests..." // Placeholder for running integration tests
            }
        }
        stage('Code Analysis') {
            steps {
                sh "./gradlew checkstyleMain checkstyleTest" // Run Checkstyle
                sh "./gradlew findbugs" // Run FindBugs
            }
        }
        stage('Security Scan') {
            steps {
                sh "./gradlew securityScan" // Perform a security scan using a Gradle task
            }
        }
        stage('Deploy to Staging') {
            steps {
                sh "aws ecs deploy-staging" // Deploy the application to a staging server using AWS ECS CLI
            }
        }
        stage('Integration Tests on Staging') {
            steps {
                sh "./gradlew integrationTest" // Run integration tests on the staging environment
            }
        }
        stage('Deploy to Production') {
            steps {
                sh "aws ecs deploy-production" // Deploy the application to a production server using AWS ECS CLI
            }
        }
    }
    
    post {
        success {
            mail to: "bhanusinghthakur1002@gmail.com",
            subject: "Pipeline Succeeded",
            body: "Pipeline Status: Success"
        }
        failure {
            mail to: "bhanusinghthakur1002@gmail.com",
            subject: "Pipeline Failed",
            body: "Pipeline Status: Failure"
        }
    }
}
